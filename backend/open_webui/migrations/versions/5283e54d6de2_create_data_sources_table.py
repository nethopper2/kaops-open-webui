import logging
from typing import Sequence, Union

from open_webui.internal.db import get_db
from open_webui.models.users import Users 

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

log = logging.getLogger(__name__)

# revision identifiers, used by Alembic.
revision: str = '0cdad206156e'
down_revision: Union[str, None] = '3781e22d8b01'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # Check if table exists before creating
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    if 'data_source' not in inspector.get_table_names():
        op.create_table(
            "data_source",
            sa.Column("id", sa.String(), primary_key=True),
            sa.Column("user_id", sa.String(), nullable=False),
            sa.Column("name", sa.Text(), nullable=False),
            sa.Column("context", sa.Text(), nullable=True),
            sa.Column("sync_status", sa.String(), default="unsynced"),
            sa.Column("last_sync", sa.BigInteger(), nullable=True),
            sa.Column("icon", sa.String(), nullable=False),
            sa.Column("action", sa.String(), nullable=True),
            sa.Column("created_at", sa.BigInteger(), nullable=False),
            sa.Column("updated_at", sa.BigInteger(), nullable=False),
        )
        log.info("Created data_source table")
    else:
        log.info("data_source table already exists, skipping creation")

    try:
        with get_db() as db:
            # Get all existing user IDs
            user_ids = [row[0] for row in db.execute(sa.text("SELECT id FROM user")).fetchall()]
            
            # Call the method directly on the Users class, not on an instance
            for user_id in user_ids:
                Users.create_default_data_sources_for_user(user_id)
                log.info(f"Created default data sources for user: {user_id}")
            db.commit()
            log.info("Successfully populated default data sources for all users.")
    except Exception as e:
        log.error(f"Error during default data population: {e}")
        raise # Re-raise to indicate migration failure

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("data_source")
    # ### end Alembic commands ###