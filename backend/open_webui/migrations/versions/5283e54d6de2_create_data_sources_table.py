import logging
from typing import Sequence, Union

from open_webui.internal.db import get_db
from open_webui.models.users import Users 

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

log = logging.getLogger(__name__)

# revision identifiers, used by Alembic.
revision: str = '0cdad206156e'
down_revision: Union[str, None] = '9f0c9cd09105'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # Check if table exists before creating
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    
    if 'data_source' not in inspector.get_table_names():
        op.create_table(
            "data_source",
            sa.Column("id", sa.String(), primary_key=True),
            sa.Column("user_id", sa.String(), nullable=False),
            sa.Column("name", sa.Text(), nullable=False),
            sa.Column("context", sa.Text(), nullable=True),
            sa.Column("sync_status", sa.String(), default="unsynced"),
            sa.Column("last_sync", sa.BigInteger(), nullable=True),
            sa.Column("icon", sa.String(), nullable=False),
            sa.Column("action", sa.String(), nullable=True),
            sa.Column("created_at", sa.BigInteger(), nullable=False),
            sa.Column("updated_at", sa.BigInteger(), nullable=False),
        )
        log.info("Created data_source table")
    else:
        log.info("data_source table already exists, skipping creation")

    try:
        with get_db() as db:
            # Check if user table exists and find the correct ID column name
            user_table_exists = 'user' in inspector.get_table_names()
            
            if not user_table_exists:
                log.warning("User table does not exist, skipping default data source creation")
                return
            
            # Get user table columns to find the correct ID column
            user_columns = [col['name'] for col in inspector.get_columns('user')]
            log.info(f"User table columns: {user_columns}")
            
            # Determine the correct ID column name
            id_column = None
            if 'id' in user_columns:
                id_column = 'id'
            elif 'user_id' in user_columns:
                id_column = 'user_id'
            elif any('id' in col.lower() for col in user_columns):
                # Find any column containing 'id'
                id_column = next(col for col in user_columns if 'id' in col.lower())
            
            if not id_column:
                log.warning("Could not find ID column in user table, skipping default data source creation")
                return
            
            log.info(f"Using '{id_column}' as the user ID column")
            
            # Get all existing user IDs using the correct column name
            query = sa.text(f"SELECT {id_column} FROM \"user\"")  # Quote table name in case it's reserved
            user_ids = [row[0] for row in db.execute(query).fetchall()]
            
            if not user_ids:
                log.info("No users found, skipping default data source creation")
                return
            
            # Call the method directly on the Users class, not on an instance
            for user_id in user_ids:
                try:
                    Users.create_default_data_sources_for_user(user_id)
                    log.info(f"Created default data sources for user: {user_id}")
                except Exception as user_error:
                    log.warning(f"Failed to create default data sources for user {user_id}: {user_error}")
                    # Continue with other users instead of failing completely
                    
            db.commit()
            log.info("Successfully populated default data sources for all users.")
            
    except Exception as e:
        log.error(f"Error during default data population: {e}")
        log.warning("Continuing migration despite data population error")

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("data_source")
    # ### end Alembic commands ###